package me.saket.dank.notifs;

import static me.saket.dank.utils.RxUtils.doNothingCompletable;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.RemoteInput;
import android.widget.Toast;

import net.dean.jraw.models.Message;

import java.util.ArrayList;
import java.util.List;

import io.reactivex.Completable;
import me.saket.dank.R;
import me.saket.dank.di.Dank;
import me.saket.dank.utils.JacksonHelper;
import me.saket.dank.utils.JrawUtils;
import timber.log.Timber;

/**
 * Receives actions made on unread message notifications, generated by {@link MessagesNotificationManager}
 * and delegates them to {@link NotificationActionsJobService},
 */
public class NotificationActionReceiver extends BroadcastReceiver {

  public static final String KEY_DIRECT_REPLY_MESSAGE = "me.saket.dank.directReplyMessage";
  private static final String INTENT_KEY_MESSAGE_JSON = "me.saket.dank.message";
  private static final String INTENT_KEY_NOTIFICATION_ID = "me.saket.dank.notificationId";
  private static final String INTENT_KEY_MESSAGE_ID_LIST = "me.saket.dank.messageIdList";

  private static final String ACTION_DIRECT_REPLY = "quickReply";
  private static final String ACTION_MARK_AS_READ = "markAsRead";
  private static final String ACTION_MARK_ALL_AS_READ = "markAllAsRead";
  private static final String ACTION_MARK_AS_SEEN = "markAllAsSeen";

  public static Intent createDirectReplyIntent(Context context, Message replyToMessage, JacksonHelper jacksonHelper, int notificationId) {
    if (notificationId == -1 || replyToMessage == null) {
      throw new AssertionError();
    }

    Intent intent = new Intent(context, NotificationActionReceiver.class);
    intent.setAction(ACTION_DIRECT_REPLY);
    intent.putExtra(INTENT_KEY_MESSAGE_JSON, jacksonHelper.toJson(replyToMessage));
    intent.putExtra(INTENT_KEY_NOTIFICATION_ID, notificationId);
    return intent;
  }

  public static Intent createMarkAsReadIntent(Context context, Message message, JacksonHelper jacksonHelper, int notificationId) {
    if (notificationId == -1 || message == null) {
      throw new AssertionError();
    }

    Intent intent = new Intent(context, NotificationActionReceiver.class);
    intent.setAction(ACTION_MARK_AS_READ);
    intent.putExtra(INTENT_KEY_MESSAGE_JSON, jacksonHelper.toJson(message));
    intent.putExtra(INTENT_KEY_NOTIFICATION_ID, notificationId);
    return intent;
  }

  public static Intent createMarkAllAsReadIntent(Context context, List<Message> messagesToMarkAsRead) {
    ArrayList<String> messageIdsToMarkAsRead = new ArrayList<>(messagesToMarkAsRead.size());
    for (Message message : messagesToMarkAsRead) {
      messageIdsToMarkAsRead.add(message.getId());
    }

    // Don't need to store the message objects because marking all as read doesn't require any Message param.

    Intent intent = new Intent(context, NotificationActionReceiver.class);
    intent.setAction(ACTION_MARK_ALL_AS_READ);
    intent.putStringArrayListExtra(INTENT_KEY_MESSAGE_ID_LIST, messageIdsToMarkAsRead);
    return intent;
  }

  /**
   * Gets called when an individual notification is dismissed.
   */
  public static Intent createMarkAsSeenIntent(Context context, Message messageToMarkAsSeen) {
    ArrayList<Message> singleList = new ArrayList<>(1);
    singleList.add(messageToMarkAsSeen);
    return createMarkAllAsSeenIntent(context, singleList);
  }

  /**
   * Gets called when the entire bundled notification is dismissed.
   */
  public static Intent createMarkAllAsSeenIntent(Context context, List<Message> messagesToMarkAsSeen) {
    ArrayList<String> messageIdsToMarkAsSeen = new ArrayList<>(messagesToMarkAsSeen.size());
    for (Message message : messagesToMarkAsSeen) {
      messageIdsToMarkAsSeen.add(message.getId());
    }

    Intent intent = new Intent(context, NotificationActionReceiver.class);
    intent.setAction(ACTION_MARK_AS_SEEN);
    intent.putStringArrayListExtra(INTENT_KEY_MESSAGE_ID_LIST, messageIdsToMarkAsSeen);
    return intent;
  }

  @Override
  public void onReceive(Context context, Intent intent) {
    String messageJson = intent.getStringExtra(INTENT_KEY_MESSAGE_JSON);
    Timber.i("Notif action: %s", intent.getAction());

    switch (intent.getAction()) {
      case ACTION_DIRECT_REPLY:
        Completable sendReplyCompletable = Completable.fromAction(() -> {
          Bundle directReplyResult = RemoteInput.getResultsFromIntent(intent);
          String replyText = directReplyResult.getString(KEY_DIRECT_REPLY_MESSAGE);
          NotificationActionsJobService.sendDirectReply(context, parseMessage(messageJson), Dank.jackson(), replyText);
        });

        // Note: dismiss notification after calling CheckUnreadMessagesJobService.refreshNotifications()
        // so that the summary notif gets removed first. Otherwise, the summary notif goes into a gray
        // color "disabled" state that is visible for a short time if there are no more individual notifs available.
        sendReplyCompletable
            .andThen(Dank.messagesNotifManager().markMessageNotifAsSeen(parseMessage(messageJson)))
            .andThen(Completable.fromAction(() -> CheckUnreadMessagesJobService.refreshNotifications(context)))
            .andThen(Dank.messagesNotifManager().dismissNotification(context, intent.getIntExtra(INTENT_KEY_NOTIFICATION_ID, -1)))
            .subscribe(doNothingCompletable(), error -> {
              Timber.e(error, "Couldn't send direct reply");
              Toast.makeText(context, R.string.common_unknown_error_message, Toast.LENGTH_LONG).show();
            });
        break;

      case ACTION_MARK_AS_READ:
        Message message = parseMessage(messageJson);
        Dank.messagesNotifManager()
            .markMessageNotifAsSeen(message)
            .andThen(Completable.fromAction(() -> {
              // Offload work to a service because Receivers are destroyed immediately.
              NotificationActionsJobService.markAsRead(context, message, Dank.jackson());

              // Refresh the notifs so that the summary notif gets canceled if no more notifs are present.
              CheckUnreadMessagesJobService.refreshNotifications(context);
            }))
            .andThen(Dank.messagesNotifManager().dismissNotification(context, intent.getIntExtra(INTENT_KEY_NOTIFICATION_ID, -1)))
            .subscribe();
        break;

      case ACTION_MARK_ALL_AS_READ:
        Timber.i("Marking all as read");
        List<String> messageIdsToMarkAsRead = intent.getStringArrayListExtra(INTENT_KEY_MESSAGE_ID_LIST);
        Dank.messagesNotifManager()
            .markMessageNotifAsSeen(messageIdsToMarkAsRead)
            .andThen(Completable.fromAction(() -> CheckUnreadMessagesJobService.refreshNotifications(context)))
            .andThen(Completable.fromAction(() -> NotificationActionsJobService.markAllAsRead(context)))
            .subscribe();
        break;

      case ACTION_MARK_AS_SEEN:
        List<String> messageIdsToMarkAsSeen = intent.getStringArrayListExtra(INTENT_KEY_MESSAGE_ID_LIST);
        Dank.messagesNotifManager()
            .markMessageNotifAsSeen(messageIdsToMarkAsSeen)
            .subscribe();
        // This action gets called only when all the notifs are dismissed, so we don't need to refresh the notif again.
        break;

      default:
        throw new UnsupportedOperationException("Unknown action: " + intent.getAction());
    }
  }

  private Message parseMessage(String messageJson) {
    return JrawUtils.parseMessageJson(messageJson, Dank.jackson());
  }

}
